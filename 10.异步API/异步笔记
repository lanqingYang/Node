
同步API和异步API
同步：只有当当前api执行完成之后，才能继续执行下一个api
比如：
console.log('before')
console.log('after')

异步AIP：程序不需要等待异步api执行完成之后再执行异步api代码
console.log("before");
//定时器 异步api
setTimeout(() => {
  console.log("last");
}, 2000);

console.log("after");
执行结果
=》before after last


2。同步api于异步api的区别
  1.同步api可以从返回值中直接拿到api执行结果，但是异步api是不可以的
    通过回调函数来拿到异步api的结果
  2.代码执行顺序不一样
    同步会从上依次到下，前面代码会阻塞后面的代码执行
    异步不会

代码执行顺序分析： 先将所有同步api执行完、再执行异步api（会将回调函数的api放到回调函数队列）

同步代码放到同步代码执行区，执行完成。
异步代码放到异步代码执行区：等待同步代码执行区执行完成，再执行异步代码。
回调函数队列：存放异步代码的回调函数

异步中存放了setTimeout(callback1,2000)、setTimeout(callback1,0)
··同步执行完成，异步执行，
0s后，将0s对应的哪个回调函数队列的回调函数callbakc1放入同步代码执行区去执行
2s后，将2s对应的哪个回调函数队列的回调函数callback2放入同步代码执行区去执行


关于回调函数：
function get(callback){};  //定义get函数
get(()=>{})                //调用get函数

callback对应的函数()=>{}这个匿名函数 就是回调函数
  ()=>{}是一个函数的定义 这个函数在get（）内部去调用





3.！！！！！！Promiese ！！！！！！
解决node.js异步编程中回调地狱的问题

resolve, reject本质上这两个参数就是两个函数
成功调reslove，失败调reject


4.异步函数！！
异步编程语法的终极解决方案，可以让我们将异步代码写成同步的形式,让代码不再有回调函数嵌套

//1.在普通函数定义的前面加上async 普通函数变成异步函数
//2.异步函数默认返回值是promise对象！！
//3.使用throw关键字进行错误的抛出,代替了reject方法,调用异步函数再链式调用catch获取函数执行的错误信息
//4.使用return关键字进行结果返回,代替了resolve方法，调用异步函数再链式调用then获取函数执行结果

在异步函数中，只是省去了promise的创建，其他地方还是一样的

!!!await关键字
//1.它只能出现在异步函数中，在全局写是不行的
//await后面只能写promise 其他类型的api不可以
//2.await promise 可以暂停异步函数的执行，等待promise对象返回结果后再向下执行

