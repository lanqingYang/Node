(2020-11-22)
1. art-template有对应的服务器端版本(12.1)和客户端版本
    作用都是将数据与HTML进行拼接

    安装：npm install art-template --save
    在浏览器中实时编译： 去官方文档中下载js文件

(2020-11-24)

2.语法规则和注意事项（04）
     <script type="text/html" id="areaTpl">
    <option value="">请选择城市</option>
    {{each area}}
    <option value="{{$value.id}}">{{$value.name}}</option>
    {{/each}}
  </script>

  配合  //将服务器端返回的数据和html进行拼接
          var html = template("areaTpl", { area: result });


    注意： id是唯一的  比如标签中的id名为province ，script的id就不可以为province了！！

3.formData对象（05）
    ·作用： .1 模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数格式
          .2 异步上传二进制文件

    表单中 input  的name属性必须设置，会将name属性的名称当作对象的属性名

    ·使用： .1 准备html表单
          .2 将HTML表单转转化为formData对象 
            var form = document.querySelector("#form");
            var formData = new FormData(form);

          .3 提交表单对象 xhr.send(formData)  [formData对象不能放在get请求中]

    ·注意事项：
        .1  body-parse这个模块只能处理客户端向服务器端传递过来的post请求参数，
            但是这个模块不能处理客户端向服务器端传递过来的formData对象
            利用formidable模块来处理

    ·实例方法：(05)
      .1 formData.get('key') 获取表单对象属性的值 
      .2 .set('key', "value") 设置表单对象属性的值  用于二次处理表单的值 ：注意设置的表单属性存在那么就替换，不存在就新增
      .3 .delete('key') 删除表单对象属性的值
      .4 .append('key', "value") 追加表单对象属性的值 
      /* set和append方法的区别，在属性名存在的情况下，set会覆盖原有键名的值，append会保留两个值
      但是不做特殊设置，服务器端会只认最后一次提交的，但是在控制台中可以看到两个username */

        //查看它下面的所有方法
        console.dir(FormData);
      
      ·二进制文件传输：！！！！！
       在服务器端：（06）
        .0 引入 formidable 第三方模块
        .1创建formidable表单解析对象
         const form=new fomidable.IncomingForm();
        .2保留上传文件的后缀名字！！
         form.keepExtensions=true;
       .3设置客户端上传文件的路径
         form.uploadDir=path.join(__dirname,'uploads');
       .4 解析客户端传递过来的FormData对象
           fields:表单中的普通请求参数，files：和文件上传的一些相关信息
          form.parse(req,(err,fields,files)=>{
          res.send(fields);
         });

      ·文件上传进度显示：（06）
        xhr.upload.onprogress 事件。 与var uploading = (ev.loaded / ev.total) * 100 + "%"
        
        /* FormData文件上传进度展示 */
          xhr.upload.onprogress = function (ev) {
          //在文件上传的过程中持续触发
          // console.log(ev); //ev.loaded 属性： 目前上传文件的大小  ，ev.total：文件总大小
          var uploading = (ev.loaded / ev.total) * 100 + "%";
          //把值赋值给进度条
          bar.style.width = uploading;
          bar.innerHTML = uploading;
        };

    ·选取的文件显示在页面上：
      服务器端： res.send({
             path:files.attrName.path.split('public')[1]
         });
         传递一个JSON数据，注意传过去是字符串形式的！！ 需要用JSON.parse()转换

       客户端： 需要把拿到的path地址给img的src即可
        