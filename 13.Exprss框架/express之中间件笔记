1.中间件
一堆方法，可以接受客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理

·可以针对同一个请求设置多个中间件，处理多次，但要设置next参数，并调用next()才会往下执行
next()调用，将请求的控制权交给下一个中间件，直到请求结束的中间件
 默认情况下，请求从上到下依次匹配中间件，一旦成功，就会终止匹配。

 2.app.use中间件(03.js)
  .use()方法可以接收所有的请求方式，直接传入请求处理函数，代表接收所有的请求,要记得转交控制权 调用next()
  ·要把它放在所有中间件的前面，不然按照顺序匹配，在之前就被其他中间件匹配了就没他什么事儿了
  ·第一个参数也可以传入请求地址，代表只要是这个地址就接收这个请求
  

3.中间件应用(04.js)
 .1路由保护。
    客户端在访问需要登陆的页面时，可以先使用中间件判断用户登陆状态，
   如果未登录，则拦截请求，直接响应，禁止用户进入需要登陆的界面

 .2网站维护公告。
    在所有路由的上面定义接受所有请求的中间件，直接为客户端做出响应，网站正在维护中

 .3自定义404页面。
    在所有中间件的最底下。
    res.status(404)响应状态码
   

4.错误处理中间件：
 错误处理中间件参数加上了err，(err, req, res, next)
 只能捕获到同步代码的错误 05中的throw error是一个同步代码
 异步代码出现错误是没有办法捕获到的!!!，需要手动处理：调用next（）方法，并将错误信息传递到next方法中即可
 （next不传参数，代表转交控制权，传参数代表要触发错误处理中间件！！！）
next()只能传递一个参数，并且必须是一个字符串类型，当要传递两个参数的时候，传一个参写成对象形式（对象转换成字符串类型再传入next中）
 JSON.stringify()将对象数据类型转换为字符串数据类型

5.错误捕获
    在node.js中，异步API的错误信息都是通过回调函数获取的，支持Promise对象的异步API发生错误可以通过catch方法获取。
    异步函数（异步代码写成了同步形式）错误获取：
    try catch 捕获，可捕获同步和异步函数错误，但不能捕获其他类型的异步错误

6.静态资源处理
   通过Express内置的express.static方便托管静态文件，如img、css、js等