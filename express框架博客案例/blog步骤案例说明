
1.案件初始化

    1.1 创建所需文件夹
     public文件夹 静态资源
     model       数据库操作
     route       路由
     views       模板

    1.2 初始化项目描述文件
     npm init -y

    1.3 下载模块
     npm install express mongoose art-template express-art-template

    1.4 创建服务器
     在根目录下创建app.js 项目的入口文件/主文件
     监听端口用80，浏览器会自动加上，不用填写

    1.5 构建模块化路由
     这里建立了两个 展示 home.js 管理 admin.js 并将模块传出去
     app.js引入这两个路由对象

    1.6 构建blog管理页面模板
     开发静态资源文件 app.usr(express.static(资源路径))
     注意这里html！！！文件不是静态资源文件，它需要拼接，要把它放到views下
     app.js中进行模板配置： 所在位置，后缀名，当渲染后缀为art的模板时，使用的模板引擎是什么（因为支持使用多个模板，所以要指定）
     改外链路径（见 知识点文件第1点）

    1.7 模板优化
      1，提取公共部分
      2，抽离骨架 子模版继承骨架 利用{{block 'name'}}{{/block}}进行模板那内容的填充

2.功能的实现

2.1 登陆
    .1创建用户集合，初始化用户 （连接数据库、创建用户集合、初始化用户）
    .2为登陆表单项设置请求地址，请求方式以及表单项name
    .3当用户点击登陆按钮，客户端验证用户是否填写了表单
    .4服务器端接收请求参数，验证用户是否填写了登陆表单
    （ps:在浏览器端可以禁用js代码，所以是不安全的，
    所以，对填写内容的判断，在服务器端也应该写一个）
    .5根据邮箱地址查找用户信息
    .6用户不存在，为客户端响应，阻止程序向下执行
    .7存在，将用户名和密码及进行比对

2.2 新增用户
    .1为用户列表页面的新增用户按钮添加连接
    .2添加一个连接对应的路由，在路由处理函数中渲染新增用户模板
    .3为新增用户表单指定请求地址、方式、为表单添加name属性
    .4增加实现添加用户的路由功能
    .5接收到客户端传递过来的请求参数
    .6对请求参数的格式进行验证            
    .7验证当前要注册的邮箱地址是否已经注册过
    .8对密码进行加密处理
    .9将用户信息添加到数据库中 
    .10重定向页面到用户列表页面

2.3用户信息修改
    .1将要修改的用户ID传递到服务器端
    .2建立用户信息修改功能对应的路由
    .3接收客户端表单传递过来的请求参数
    .4根据id查询用户信息，并将客户端传递过来的密码和数据库中的密码进行比对
    .5如果比对失败，对客户端做出响应
    .6比对成功，更新数据库

2.4用户信息删除
    .1在确认框中添加隐藏域用于存储要删除用户的id值
    .2为删除按钮添加自定义属性以存储要删除用户的id值
    .3为删除按钮添加点击事件，在点击事件处理函数中获取自定义属性中存储的id值并将id值存储在表单的隐藏域中
    .4为删除表单添加提交地址，提交方式
    .5服务器端建立删除功能路由
    .6接收客户端传递过来的参数id
    .7根据id删除用户

3.关于文章的增删改查类似于用户信息 步骤差不多

4.文章评论
    .1 创建评论集合
    .2 判断用户是否登陆，如果用户登陆，就允许用户提交评论表单
    .3 在服务器端拆创建文章评论功能对应路由
    .4 在路由请求处理函数中接收客户端传过来的评论信息
    .5 评论信息存储到评论集合中
    .6 重定向回文章详情页面
    .7 在文章详情页面路由中获取文章评论信息并展示在页面中